ADD NUMBERS:
---------------------
Non-Decimal
1. currentNumber * ndPlace
2. currentNumber + input
3. ndPlace * 10

Decimal
1. currentNumber + (input * decimalPlace)
2. decimalPlace / 10


SWITCH TO DECIMAL:
---------------------
1. ndPlace = 1
2. switch state for the add numbers function to decimal (even if already decimal)
3. decimalPlace = .1
4. Switch to LHS if in Equals state and currentNumber to 0.0


CLEAR:
---------------------
1. currentNumber = 0.0
2. switch to LHS operator state
3. switch to non-decimal state
4. Switch to LHS if in Equals state and currentNumber to 0.0


OPERATORS:
---------------------
LHS (+ and -)
1. Switch to RHS state
2. LHSNum = currentNumber
3. Make multiplier either 1 or -1 (probably func param)
4. Move to AM state
5. currentNumber = 0.0

RHS (+ and -)
1. currentNumber = LHSNum + (multiplier*currentNumber)
2. LHSNum = currentNumber
3. Make multiplier either 1 or -1 (probably func param)
4. Move to MD state
5. Display LHSNum
6. currentNumber = 0.0

LHS (* and -)
1. Switch to RHS state
2. LHSNum = currentNumber
3. Make exponent 1 or -1
4. Move to MD state
5. currentNumber = 0.0

RHS (* and /)
1. currentNumber = LHSNum + exp(currentNumber, exponent)
2. LHSNum = currentNumber
3. Make exponent 1 or -1
4. Move to MD state
5. Display LHSNum
6. currentNumber = 0.0


EQUALS
---------------------
LHS
1. Return currentNumber

RHS (+ and -)
1. currentNumber = LHSNum + (multiplier*currentNumber)
2. display currentNumber
3. Switch to Equals state so can be repeated if equal button pressed again